// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jfr_labels.proto
// Protobuf Java Version: 4.26.1

package io.pyroscope.labels.pb;

public final class JfrLabels {
  private JfrLabels() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      JfrLabels.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ContextOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.pyroscope.labels.pb.Context)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>map&lt;int64, int64&gt; labels = 1;</code>
     */
    int getLabelsCount();
    /**
     * <code>map&lt;int64, int64&gt; labels = 1;</code>
     */
    boolean containsLabels(
        long key);
    /**
     * Use {@link #getLabelsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.Long>
    getLabels();
    /**
     * <code>map&lt;int64, int64&gt; labels = 1;</code>
     */
    java.util.Map<java.lang.Long, java.lang.Long>
    getLabelsMap();
    /**
     * <code>map&lt;int64, int64&gt; labels = 1;</code>
     */
    long getLabelsOrDefault(
        long key,
        long defaultValue);
    /**
     * <code>map&lt;int64, int64&gt; labels = 1;</code>
     */
    long getLabelsOrThrow(
        long key);
  }
  /**
   * Protobuf type {@code io.pyroscope.labels.pb.Context}
   */
  public static final class Context extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:io.pyroscope.labels.pb.Context)
      ContextOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Context.class.getName());
    }
    // Use Context.newBuilder() to construct.
    private Context(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Context() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.pyroscope.labels.pb.JfrLabels.internal_static_io_pyroscope_labels_pb_Context_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 1:
          return internalGetLabels();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.pyroscope.labels.pb.JfrLabels.internal_static_io_pyroscope_labels_pb_Context_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.pyroscope.labels.pb.JfrLabels.Context.class, io.pyroscope.labels.pb.JfrLabels.Context.Builder.class);
    }

    public static final int LABELS_FIELD_NUMBER = 1;
    private static final class LabelsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Long, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Long, java.lang.Long>newDefaultInstance(
                  io.pyroscope.labels.pb.JfrLabels.internal_static_io_pyroscope_labels_pb_Context_LabelsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.Long, java.lang.Long> labels_;
    private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
    internalGetLabels() {
      if (labels_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            LabelsDefaultEntryHolder.defaultEntry);
      }
      return labels_;
    }
    public int getLabelsCount() {
      return internalGetLabels().getMap().size();
    }
    /**
     * <code>map&lt;int64, int64&gt; labels = 1;</code>
     */
    @java.lang.Override
    public boolean containsLabels(
        long key) {

      return internalGetLabels().getMap().containsKey(key);
    }
    /**
     * Use {@link #getLabelsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.Long> getLabels() {
      return getLabelsMap();
    }
    /**
     * <code>map&lt;int64, int64&gt; labels = 1;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Long, java.lang.Long> getLabelsMap() {
      return internalGetLabels().getMap();
    }
    /**
     * <code>map&lt;int64, int64&gt; labels = 1;</code>
     */
    @java.lang.Override
    public long getLabelsOrDefault(
        long key,
        long defaultValue) {

      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetLabels().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, int64&gt; labels = 1;</code>
     */
    @java.lang.Override
    public long getLabelsOrThrow(
        long key) {

      java.util.Map<java.lang.Long, java.lang.Long> map =
          internalGetLabels().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessage
        .serializeLongMapTo(
          output,
          internalGetLabels(),
          LabelsDefaultEntryHolder.defaultEntry,
          1);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.Long, java.lang.Long> entry
           : internalGetLabels().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Long, java.lang.Long>
        labels__ = LabelsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, labels__);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.pyroscope.labels.pb.JfrLabels.Context)) {
        return super.equals(obj);
      }
      io.pyroscope.labels.pb.JfrLabels.Context other = (io.pyroscope.labels.pb.JfrLabels.Context) obj;

      if (!internalGetLabels().equals(
          other.internalGetLabels())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetLabels().getMap().isEmpty()) {
        hash = (37 * hash) + LABELS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetLabels().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.pyroscope.labels.pb.JfrLabels.Context parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.pyroscope.labels.pb.JfrLabels.Context parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.pyroscope.labels.pb.JfrLabels.Context parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.pyroscope.labels.pb.JfrLabels.Context parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.pyroscope.labels.pb.JfrLabels.Context parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.pyroscope.labels.pb.JfrLabels.Context parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.pyroscope.labels.pb.JfrLabels.Context parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.pyroscope.labels.pb.JfrLabels.Context parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static io.pyroscope.labels.pb.JfrLabels.Context parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static io.pyroscope.labels.pb.JfrLabels.Context parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.pyroscope.labels.pb.JfrLabels.Context parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.pyroscope.labels.pb.JfrLabels.Context parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.pyroscope.labels.pb.JfrLabels.Context prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code io.pyroscope.labels.pb.Context}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.pyroscope.labels.pb.Context)
        io.pyroscope.labels.pb.JfrLabels.ContextOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.pyroscope.labels.pb.JfrLabels.internal_static_io_pyroscope_labels_pb_Context_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
          int number) {
        switch (number) {
          case 1:
            return internalGetLabels();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableLabels();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.pyroscope.labels.pb.JfrLabels.internal_static_io_pyroscope_labels_pb_Context_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.pyroscope.labels.pb.JfrLabels.Context.class, io.pyroscope.labels.pb.JfrLabels.Context.Builder.class);
      }

      // Construct using io.pyroscope.labels.pb.JfrLabels.Context.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        internalGetMutableLabels().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.pyroscope.labels.pb.JfrLabels.internal_static_io_pyroscope_labels_pb_Context_descriptor;
      }

      @java.lang.Override
      public io.pyroscope.labels.pb.JfrLabels.Context getDefaultInstanceForType() {
        return io.pyroscope.labels.pb.JfrLabels.Context.getDefaultInstance();
      }

      @java.lang.Override
      public io.pyroscope.labels.pb.JfrLabels.Context build() {
        io.pyroscope.labels.pb.JfrLabels.Context result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.pyroscope.labels.pb.JfrLabels.Context buildPartial() {
        io.pyroscope.labels.pb.JfrLabels.Context result = new io.pyroscope.labels.pb.JfrLabels.Context(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(io.pyroscope.labels.pb.JfrLabels.Context result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.labels_ = internalGetLabels();
          result.labels_.makeImmutable();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.pyroscope.labels.pb.JfrLabels.Context) {
          return mergeFrom((io.pyroscope.labels.pb.JfrLabels.Context)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.pyroscope.labels.pb.JfrLabels.Context other) {
        if (other == io.pyroscope.labels.pb.JfrLabels.Context.getDefaultInstance()) return this;
        internalGetMutableLabels().mergeFrom(
            other.internalGetLabels());
        bitField0_ |= 0x00000001;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.MapEntry<java.lang.Long, java.lang.Long>
                labels__ = input.readMessage(
                    LabelsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableLabels().getMutableMap().put(
                    labels__.getKey(), labels__.getValue());
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.Long, java.lang.Long> labels_;
      private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
          internalGetLabels() {
        if (labels_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              LabelsDefaultEntryHolder.defaultEntry);
        }
        return labels_;
      }
      private com.google.protobuf.MapField<java.lang.Long, java.lang.Long>
          internalGetMutableLabels() {
        if (labels_ == null) {
          labels_ = com.google.protobuf.MapField.newMapField(
              LabelsDefaultEntryHolder.defaultEntry);
        }
        if (!labels_.isMutable()) {
          labels_ = labels_.copy();
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return labels_;
      }
      public int getLabelsCount() {
        return internalGetLabels().getMap().size();
      }
      /**
       * <code>map&lt;int64, int64&gt; labels = 1;</code>
       */
      @java.lang.Override
      public boolean containsLabels(
          long key) {

        return internalGetLabels().getMap().containsKey(key);
      }
      /**
       * Use {@link #getLabelsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long> getLabels() {
        return getLabelsMap();
      }
      /**
       * <code>map&lt;int64, int64&gt; labels = 1;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.Long> getLabelsMap() {
        return internalGetLabels().getMap();
      }
      /**
       * <code>map&lt;int64, int64&gt; labels = 1;</code>
       */
      @java.lang.Override
      public long getLabelsOrDefault(
          long key,
          long defaultValue) {

        java.util.Map<java.lang.Long, java.lang.Long> map =
            internalGetLabels().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, int64&gt; labels = 1;</code>
       */
      @java.lang.Override
      public long getLabelsOrThrow(
          long key) {

        java.util.Map<java.lang.Long, java.lang.Long> map =
            internalGetLabels().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearLabels() {
        bitField0_ = (bitField0_ & ~0x00000001);
        internalGetMutableLabels().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;int64, int64&gt; labels = 1;</code>
       */
      public Builder removeLabels(
          long key) {

        internalGetMutableLabels().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.Long>
          getMutableLabels() {
        bitField0_ |= 0x00000001;
        return internalGetMutableLabels().getMutableMap();
      }
      /**
       * <code>map&lt;int64, int64&gt; labels = 1;</code>
       */
      public Builder putLabels(
          long key,
          long value) {


        internalGetMutableLabels().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>map&lt;int64, int64&gt; labels = 1;</code>
       */
      public Builder putAllLabels(
          java.util.Map<java.lang.Long, java.lang.Long> values) {
        internalGetMutableLabels().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000001;
        return this;
      }

      // @@protoc_insertion_point(builder_scope:io.pyroscope.labels.pb.Context)
    }

    // @@protoc_insertion_point(class_scope:io.pyroscope.labels.pb.Context)
    private static final io.pyroscope.labels.pb.JfrLabels.Context DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.pyroscope.labels.pb.JfrLabels.Context();
    }

    public static io.pyroscope.labels.pb.JfrLabels.Context getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Context>
        PARSER = new com.google.protobuf.AbstractParser<Context>() {
      @java.lang.Override
      public Context parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Context> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Context> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.pyroscope.labels.pb.JfrLabels.Context getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LabelsSnapshotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.pyroscope.labels.pb.LabelsSnapshot)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
     */
    int getContextsCount();
    /**
     * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
     */
    boolean containsContexts(
        long key);
    /**
     * Use {@link #getContextsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context>
    getContexts();
    /**
     * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
     */
    java.util.Map<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context>
    getContextsMap();
    /**
     * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
     */
    /* nullable */
io.pyroscope.labels.pb.JfrLabels.Context getContextsOrDefault(
        long key,
        /* nullable */
io.pyroscope.labels.pb.JfrLabels.Context defaultValue);
    /**
     * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
     */
    io.pyroscope.labels.pb.JfrLabels.Context getContextsOrThrow(
        long key);

    /**
     * <code>map&lt;int64, string&gt; strings = 2;</code>
     */
    int getStringsCount();
    /**
     * <code>map&lt;int64, string&gt; strings = 2;</code>
     */
    boolean containsStrings(
        long key);
    /**
     * Use {@link #getStringsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Long, java.lang.String>
    getStrings();
    /**
     * <code>map&lt;int64, string&gt; strings = 2;</code>
     */
    java.util.Map<java.lang.Long, java.lang.String>
    getStringsMap();
    /**
     * <code>map&lt;int64, string&gt; strings = 2;</code>
     */
    /* nullable */
java.lang.String getStringsOrDefault(
        long key,
        /* nullable */
java.lang.String defaultValue);
    /**
     * <code>map&lt;int64, string&gt; strings = 2;</code>
     */
    java.lang.String getStringsOrThrow(
        long key);
  }
  /**
   * Protobuf type {@code io.pyroscope.labels.pb.LabelsSnapshot}
   */
  public static final class LabelsSnapshot extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:io.pyroscope.labels.pb.LabelsSnapshot)
      LabelsSnapshotOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        LabelsSnapshot.class.getName());
    }
    // Use LabelsSnapshot.newBuilder() to construct.
    private LabelsSnapshot(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private LabelsSnapshot() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.pyroscope.labels.pb.JfrLabels.internal_static_io_pyroscope_labels_pb_LabelsSnapshot_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 1:
          return internalGetContexts();
        case 2:
          return internalGetStrings();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.pyroscope.labels.pb.JfrLabels.internal_static_io_pyroscope_labels_pb_LabelsSnapshot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot.class, io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot.Builder.class);
    }

    public static final int CONTEXTS_FIELD_NUMBER = 1;
    private static final class ContextsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context>newDefaultInstance(
                  io.pyroscope.labels.pb.JfrLabels.internal_static_io_pyroscope_labels_pb_LabelsSnapshot_ContextsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  io.pyroscope.labels.pb.JfrLabels.Context.getDefaultInstance());
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context> contexts_;
    private com.google.protobuf.MapField<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context>
    internalGetContexts() {
      if (contexts_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ContextsDefaultEntryHolder.defaultEntry);
      }
      return contexts_;
    }
    public int getContextsCount() {
      return internalGetContexts().getMap().size();
    }
    /**
     * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
     */
    @java.lang.Override
    public boolean containsContexts(
        long key) {

      return internalGetContexts().getMap().containsKey(key);
    }
    /**
     * Use {@link #getContextsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context> getContexts() {
      return getContextsMap();
    }
    /**
     * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context> getContextsMap() {
      return internalGetContexts().getMap();
    }
    /**
     * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
     */
    @java.lang.Override
    public /* nullable */
io.pyroscope.labels.pb.JfrLabels.Context getContextsOrDefault(
        long key,
        /* nullable */
io.pyroscope.labels.pb.JfrLabels.Context defaultValue) {

      java.util.Map<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context> map =
          internalGetContexts().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
     */
    @java.lang.Override
    public io.pyroscope.labels.pb.JfrLabels.Context getContextsOrThrow(
        long key) {

      java.util.Map<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context> map =
          internalGetContexts().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int STRINGS_FIELD_NUMBER = 2;
    private static final class StringsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Long, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Long, java.lang.String>newDefaultInstance(
                  io.pyroscope.labels.pb.JfrLabels.internal_static_io_pyroscope_labels_pb_LabelsSnapshot_StringsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.Long, java.lang.String> strings_;
    private com.google.protobuf.MapField<java.lang.Long, java.lang.String>
    internalGetStrings() {
      if (strings_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            StringsDefaultEntryHolder.defaultEntry);
      }
      return strings_;
    }
    public int getStringsCount() {
      return internalGetStrings().getMap().size();
    }
    /**
     * <code>map&lt;int64, string&gt; strings = 2;</code>
     */
    @java.lang.Override
    public boolean containsStrings(
        long key) {

      return internalGetStrings().getMap().containsKey(key);
    }
    /**
     * Use {@link #getStringsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, java.lang.String> getStrings() {
      return getStringsMap();
    }
    /**
     * <code>map&lt;int64, string&gt; strings = 2;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Long, java.lang.String> getStringsMap() {
      return internalGetStrings().getMap();
    }
    /**
     * <code>map&lt;int64, string&gt; strings = 2;</code>
     */
    @java.lang.Override
    public /* nullable */
java.lang.String getStringsOrDefault(
        long key,
        /* nullable */
java.lang.String defaultValue) {

      java.util.Map<java.lang.Long, java.lang.String> map =
          internalGetStrings().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int64, string&gt; strings = 2;</code>
     */
    @java.lang.Override
    public java.lang.String getStringsOrThrow(
        long key) {

      java.util.Map<java.lang.Long, java.lang.String> map =
          internalGetStrings().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessage
        .serializeLongMapTo(
          output,
          internalGetContexts(),
          ContextsDefaultEntryHolder.defaultEntry,
          1);
      com.google.protobuf.GeneratedMessage
        .serializeLongMapTo(
          output,
          internalGetStrings(),
          StringsDefaultEntryHolder.defaultEntry,
          2);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context> entry
           : internalGetContexts().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context>
        contexts__ = ContextsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, contexts__);
      }
      for (java.util.Map.Entry<java.lang.Long, java.lang.String> entry
           : internalGetStrings().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Long, java.lang.String>
        strings__ = StringsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, strings__);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot)) {
        return super.equals(obj);
      }
      io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot other = (io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot) obj;

      if (!internalGetContexts().equals(
          other.internalGetContexts())) return false;
      if (!internalGetStrings().equals(
          other.internalGetStrings())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetContexts().getMap().isEmpty()) {
        hash = (37 * hash) + CONTEXTS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetContexts().hashCode();
      }
      if (!internalGetStrings().getMap().isEmpty()) {
        hash = (37 * hash) + STRINGS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetStrings().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code io.pyroscope.labels.pb.LabelsSnapshot}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.pyroscope.labels.pb.LabelsSnapshot)
        io.pyroscope.labels.pb.JfrLabels.LabelsSnapshotOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.pyroscope.labels.pb.JfrLabels.internal_static_io_pyroscope_labels_pb_LabelsSnapshot_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
          int number) {
        switch (number) {
          case 1:
            return internalGetContexts();
          case 2:
            return internalGetStrings();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableContexts();
          case 2:
            return internalGetMutableStrings();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.pyroscope.labels.pb.JfrLabels.internal_static_io_pyroscope_labels_pb_LabelsSnapshot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot.class, io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot.Builder.class);
      }

      // Construct using io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        internalGetMutableContexts().clear();
        internalGetMutableStrings().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.pyroscope.labels.pb.JfrLabels.internal_static_io_pyroscope_labels_pb_LabelsSnapshot_descriptor;
      }

      @java.lang.Override
      public io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot getDefaultInstanceForType() {
        return io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot.getDefaultInstance();
      }

      @java.lang.Override
      public io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot build() {
        io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot buildPartial() {
        io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot result = new io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.contexts_ = internalGetContexts().build(ContextsDefaultEntryHolder.defaultEntry);
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.strings_ = internalGetStrings();
          result.strings_.makeImmutable();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot) {
          return mergeFrom((io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot other) {
        if (other == io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot.getDefaultInstance()) return this;
        internalGetMutableContexts().mergeFrom(
            other.internalGetContexts());
        bitField0_ |= 0x00000001;
        internalGetMutableStrings().mergeFrom(
            other.internalGetStrings());
        bitField0_ |= 0x00000002;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.MapEntry<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context>
                contexts__ = input.readMessage(
                    ContextsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableContexts().ensureBuilderMap().put(
                    contexts__.getKey(), contexts__.getValue());
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                com.google.protobuf.MapEntry<java.lang.Long, java.lang.String>
                strings__ = input.readMessage(
                    StringsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableStrings().getMutableMap().put(
                    strings__.getKey(), strings__.getValue());
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private static final class ContextsConverter implements com.google.protobuf.MapFieldBuilder.Converter<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.ContextOrBuilder, io.pyroscope.labels.pb.JfrLabels.Context> {
        @java.lang.Override
        public io.pyroscope.labels.pb.JfrLabels.Context build(io.pyroscope.labels.pb.JfrLabels.ContextOrBuilder val) {
          if (val instanceof io.pyroscope.labels.pb.JfrLabels.Context) { return (io.pyroscope.labels.pb.JfrLabels.Context) val; }
          return ((io.pyroscope.labels.pb.JfrLabels.Context.Builder) val).build();
        }

        @java.lang.Override
        public com.google.protobuf.MapEntry<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context> defaultEntry() {
          return ContextsDefaultEntryHolder.defaultEntry;
        }
      };
      private static final ContextsConverter contextsConverter = new ContextsConverter();

      private com.google.protobuf.MapFieldBuilder<
          java.lang.Long, io.pyroscope.labels.pb.JfrLabels.ContextOrBuilder, io.pyroscope.labels.pb.JfrLabels.Context, io.pyroscope.labels.pb.JfrLabels.Context.Builder> contexts_;
      private com.google.protobuf.MapFieldBuilder<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.ContextOrBuilder, io.pyroscope.labels.pb.JfrLabels.Context, io.pyroscope.labels.pb.JfrLabels.Context.Builder>
          internalGetContexts() {
        if (contexts_ == null) {
          return new com.google.protobuf.MapFieldBuilder<>(contextsConverter);
        }
        return contexts_;
      }
      private com.google.protobuf.MapFieldBuilder<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.ContextOrBuilder, io.pyroscope.labels.pb.JfrLabels.Context, io.pyroscope.labels.pb.JfrLabels.Context.Builder>
          internalGetMutableContexts() {
        if (contexts_ == null) {
          contexts_ = new com.google.protobuf.MapFieldBuilder<>(contextsConverter);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return contexts_;
      }
      public int getContextsCount() {
        return internalGetContexts().ensureBuilderMap().size();
      }
      /**
       * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
       */
      @java.lang.Override
      public boolean containsContexts(
          long key) {

        return internalGetContexts().ensureBuilderMap().containsKey(key);
      }
      /**
       * Use {@link #getContextsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context> getContexts() {
        return getContextsMap();
      }
      /**
       * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context> getContextsMap() {
        return internalGetContexts().getImmutableMap();
      }
      /**
       * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
       */
      @java.lang.Override
      public /* nullable */
io.pyroscope.labels.pb.JfrLabels.Context getContextsOrDefault(
          long key,
          /* nullable */
io.pyroscope.labels.pb.JfrLabels.Context defaultValue) {

        java.util.Map<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.ContextOrBuilder> map = internalGetMutableContexts().ensureBuilderMap();
        return map.containsKey(key) ? contextsConverter.build(map.get(key)) : defaultValue;
      }
      /**
       * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
       */
      @java.lang.Override
      public io.pyroscope.labels.pb.JfrLabels.Context getContextsOrThrow(
          long key) {

        java.util.Map<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.ContextOrBuilder> map = internalGetMutableContexts().ensureBuilderMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return contextsConverter.build(map.get(key));
      }
      public Builder clearContexts() {
        bitField0_ = (bitField0_ & ~0x00000001);
        internalGetMutableContexts().clear();
        return this;
      }
      /**
       * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
       */
      public Builder removeContexts(
          long key) {

        internalGetMutableContexts().ensureBuilderMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context>
          getMutableContexts() {
        bitField0_ |= 0x00000001;
        return internalGetMutableContexts().ensureMessageMap();
      }
      /**
       * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
       */
      public Builder putContexts(
          long key,
          io.pyroscope.labels.pb.JfrLabels.Context value) {

        if (value == null) { throw new NullPointerException("map value"); }
        internalGetMutableContexts().ensureBuilderMap()
            .put(key, value);
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
       */
      public Builder putAllContexts(
          java.util.Map<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context> values) {
        for (java.util.Map.Entry<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.Context> e : values.entrySet()) {
          if (e.getKey() == null || e.getValue() == null) {
            throw new NullPointerException();
          }
        }
        internalGetMutableContexts().ensureBuilderMap()
            .putAll(values);
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>map&lt;int64, .io.pyroscope.labels.pb.Context&gt; contexts = 1;</code>
       */
      public io.pyroscope.labels.pb.JfrLabels.Context.Builder putContextsBuilderIfAbsent(
          long key) {
        java.util.Map<java.lang.Long, io.pyroscope.labels.pb.JfrLabels.ContextOrBuilder> builderMap = internalGetMutableContexts().ensureBuilderMap();
        io.pyroscope.labels.pb.JfrLabels.ContextOrBuilder entry = builderMap.get(key);
        if (entry == null) {
          entry = io.pyroscope.labels.pb.JfrLabels.Context.newBuilder();
          builderMap.put(key, entry);
        }
        if (entry instanceof io.pyroscope.labels.pb.JfrLabels.Context) {
          entry = ((io.pyroscope.labels.pb.JfrLabels.Context) entry).toBuilder();
          builderMap.put(key, entry);
        }
        return (io.pyroscope.labels.pb.JfrLabels.Context.Builder) entry;
      }

      private com.google.protobuf.MapField<
          java.lang.Long, java.lang.String> strings_;
      private com.google.protobuf.MapField<java.lang.Long, java.lang.String>
          internalGetStrings() {
        if (strings_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              StringsDefaultEntryHolder.defaultEntry);
        }
        return strings_;
      }
      private com.google.protobuf.MapField<java.lang.Long, java.lang.String>
          internalGetMutableStrings() {
        if (strings_ == null) {
          strings_ = com.google.protobuf.MapField.newMapField(
              StringsDefaultEntryHolder.defaultEntry);
        }
        if (!strings_.isMutable()) {
          strings_ = strings_.copy();
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return strings_;
      }
      public int getStringsCount() {
        return internalGetStrings().getMap().size();
      }
      /**
       * <code>map&lt;int64, string&gt; strings = 2;</code>
       */
      @java.lang.Override
      public boolean containsStrings(
          long key) {

        return internalGetStrings().getMap().containsKey(key);
      }
      /**
       * Use {@link #getStringsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.String> getStrings() {
        return getStringsMap();
      }
      /**
       * <code>map&lt;int64, string&gt; strings = 2;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Long, java.lang.String> getStringsMap() {
        return internalGetStrings().getMap();
      }
      /**
       * <code>map&lt;int64, string&gt; strings = 2;</code>
       */
      @java.lang.Override
      public /* nullable */
java.lang.String getStringsOrDefault(
          long key,
          /* nullable */
java.lang.String defaultValue) {

        java.util.Map<java.lang.Long, java.lang.String> map =
            internalGetStrings().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int64, string&gt; strings = 2;</code>
       */
      @java.lang.Override
      public java.lang.String getStringsOrThrow(
          long key) {

        java.util.Map<java.lang.Long, java.lang.String> map =
            internalGetStrings().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearStrings() {
        bitField0_ = (bitField0_ & ~0x00000002);
        internalGetMutableStrings().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;int64, string&gt; strings = 2;</code>
       */
      public Builder removeStrings(
          long key) {

        internalGetMutableStrings().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Long, java.lang.String>
          getMutableStrings() {
        bitField0_ |= 0x00000002;
        return internalGetMutableStrings().getMutableMap();
      }
      /**
       * <code>map&lt;int64, string&gt; strings = 2;</code>
       */
      public Builder putStrings(
          long key,
          java.lang.String value) {

        if (value == null) { throw new NullPointerException("map value"); }
        internalGetMutableStrings().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>map&lt;int64, string&gt; strings = 2;</code>
       */
      public Builder putAllStrings(
          java.util.Map<java.lang.Long, java.lang.String> values) {
        internalGetMutableStrings().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000002;
        return this;
      }

      // @@protoc_insertion_point(builder_scope:io.pyroscope.labels.pb.LabelsSnapshot)
    }

    // @@protoc_insertion_point(class_scope:io.pyroscope.labels.pb.LabelsSnapshot)
    private static final io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot();
    }

    public static io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LabelsSnapshot>
        PARSER = new com.google.protobuf.AbstractParser<LabelsSnapshot>() {
      @java.lang.Override
      public LabelsSnapshot parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<LabelsSnapshot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LabelsSnapshot> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.pyroscope.labels.pb.JfrLabels.LabelsSnapshot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_pyroscope_labels_pb_Context_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_pyroscope_labels_pb_Context_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_pyroscope_labels_pb_Context_LabelsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_pyroscope_labels_pb_Context_LabelsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_pyroscope_labels_pb_LabelsSnapshot_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_pyroscope_labels_pb_LabelsSnapshot_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_pyroscope_labels_pb_LabelsSnapshot_ContextsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_pyroscope_labels_pb_LabelsSnapshot_ContextsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_pyroscope_labels_pb_LabelsSnapshot_StringsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_pyroscope_labels_pb_LabelsSnapshot_StringsEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020jfr_labels.proto\022\026io.pyroscope.labels." +
      "pb\"u\n\007Context\022;\n\006labels\030\001 \003(\0132+.io.pyros" +
      "cope.labels.pb.Context.LabelsEntry\032-\n\013La" +
      "belsEntry\022\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\003:\0028" +
      "\001\"\240\002\n\016LabelsSnapshot\022F\n\010contexts\030\001 \003(\01324" +
      ".io.pyroscope.labels.pb.LabelsSnapshot.C" +
      "ontextsEntry\022D\n\007strings\030\002 \003(\01323.io.pyros" +
      "cope.labels.pb.LabelsSnapshot.StringsEnt" +
      "ry\032P\n\rContextsEntry\022\013\n\003key\030\001 \001(\003\022.\n\005valu" +
      "e\030\002 \001(\0132\037.io.pyroscope.labels.pb.Context" +
      ":\0028\001\032.\n\014StringsEntry\022\013\n\003key\030\001 \001(\003\022\r\n\005val" +
      "ue\030\002 \001(\t:\0028\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_io_pyroscope_labels_pb_Context_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_io_pyroscope_labels_pb_Context_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_pyroscope_labels_pb_Context_descriptor,
        new java.lang.String[] { "Labels", });
    internal_static_io_pyroscope_labels_pb_Context_LabelsEntry_descriptor =
      internal_static_io_pyroscope_labels_pb_Context_descriptor.getNestedTypes().get(0);
    internal_static_io_pyroscope_labels_pb_Context_LabelsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_pyroscope_labels_pb_Context_LabelsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_io_pyroscope_labels_pb_LabelsSnapshot_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_io_pyroscope_labels_pb_LabelsSnapshot_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_pyroscope_labels_pb_LabelsSnapshot_descriptor,
        new java.lang.String[] { "Contexts", "Strings", });
    internal_static_io_pyroscope_labels_pb_LabelsSnapshot_ContextsEntry_descriptor =
      internal_static_io_pyroscope_labels_pb_LabelsSnapshot_descriptor.getNestedTypes().get(0);
    internal_static_io_pyroscope_labels_pb_LabelsSnapshot_ContextsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_pyroscope_labels_pb_LabelsSnapshot_ContextsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_io_pyroscope_labels_pb_LabelsSnapshot_StringsEntry_descriptor =
      internal_static_io_pyroscope_labels_pb_LabelsSnapshot_descriptor.getNestedTypes().get(1);
    internal_static_io_pyroscope_labels_pb_LabelsSnapshot_StringsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_pyroscope_labels_pb_LabelsSnapshot_StringsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
